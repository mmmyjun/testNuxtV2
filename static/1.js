((function () { var t = { "./src/demux/transmuxer-worker.ts": "./src/demux/transmuxer-worker.ts"(t, e, r){ "use strict"; r.r(e), r.d(e, { default: () => o }); var i = r(/*! ../demux/transmuxer */ "./src/demux/transmuxer.ts"), n = r(/*! ../events */ "./src/events.ts"), a = r(/*! ../utils/logger */ "./src/utils/logger.ts"), s = r(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js"); function o(t) { var e = new s.EventEmitter, r = function (e, r) { t.postMessage({ event: e, data: r }) }; e.on(n.Events.FRAG_DECRYPTED, r), e.on(n.Events.ERROR, r); var o = function () { var t = function (t) { var e = function (e) { r("workerLog", { logType: t, message: e }) }; a.logger[t] = e }; for (var e in a.logger) t(e) }; t.addEventListener("message", function (n) { var s = n.data; switch (s.cmd) { case "init": var u = JSON.parse(s.config); t.transmuxer = new i.default(e, s.typeSupported, u, s.vendor, s.id), (0, a.enableLogs)(u.debug, s.id), o(), r("init", null); break; case "configure": t.transmuxer.configure(s.config); break; case "demux": var c = t.transmuxer.push(s.data, s.decryptdata, s.chunkMeta, s.state); (0, i.isPromise)(c) ? c.then(function (e) { l(t, e) }) : l(t, c); break; case "flush": var h = s.chunkMeta, f = t.transmuxer.flush(h); (0, i.isPromise)(f) ? f.then(function (e) { d(t, e, h) }) : d(t, f, h) } }) } function l(t, e) { if (!(r = e.remuxResult).audio && !r.video && !r.text && !r.id3 && !r.initSegment) return !1; var r, i = [], n = e.remuxResult, a = n.audio, s = n.video; return a && u(i, a), s && u(i, s), t.postMessage({ event: "transmuxComplete", data: e }, i), !0 } function u(t, e) { e.data1 && t.push(e.data1.buffer), e.data2 && t.push(e.data2.buffer) } function d(t, e, r) { e.reduce(function (e, r) { return l(t, r) || e }, !1) || t.postMessage({ event: "transmuxComplete", data: e[0] }), t.postMessage({ event: "flush", data: r }) } }}, e = {}; function r(i) { var n = e[i]; if (void 0 !== n) return n.exports; var a = e[i] = { exports: {} }; return t[i].call(a.exports, a, a.exports, r), a.exports } r.m = t, r.n = function (t) { var e = t && t.__esModule ? function () { return t.default } : function () { return t }; return r.d(e, { a: e }), e }, r.d = function (t, e) { for (var i in e) r.o(e, i) && !r.o(t, i) && Object.defineProperty(t, i, { enumerable: !0, get: e[i] }) }, r.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, r.r = function (t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }; var i = r("./src/demux/transmuxer-worker.ts"); return i.default || i}) ()) (self);